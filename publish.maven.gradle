apply plugin: 'com.github.dcendents.android-maven'

def publishs = project.ext.publishs

def isAndroidApplication = project.plugins.hasPlugin('com.android.application')
def isAndroidLibrary = project.plugins.hasPlugin('com.android.library')
def isAndroidProject = isAndroidApplication || isAndroidLibrary

version = publishs.version
group = publishs.group

install {
	repositories.mavenInstaller {
		//beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		pom.groupId = publishs.group
		pom.artifactId = publishs.artifact
		pom.version = publishs.version

		pom.whenConfigured { pom ->
			pom.packaging = isAndroidLibrary ? 'aar' : isAndroidApplication ? 'apk' : 'jar'
			pom.dependencies.removeAll { dep -> dep.artifactId in publishs.removeDependecies }
		}

		pom.project {
			packaging isAndroidLibrary ? 'arr' : isAndroidApplication ? 'apk' : 'jar'
			groupId publishs.group
			artifactId publishs.artifact
			version publishs.version
			name = publishs.name
			description = publishs.des
			url = publishs.url
			inceptionYear publishs.year
			licenses {
				publishs.licenses.each { item ->
					if (item != null) license {
						name = item.name
						url = item.url
						distribution = item.distribution
					}
				}
			}
			scm {
				url publishs.scm.url
				connection publishs.scm.connection
				developerConnection publishs.scm.developerConnection
			}

			licenses {
				publishs.licenses.each { item ->
					if (item != null) license {
						name = item.name
						url = item.url
						distribution = item.distribution
					}
				}
			}

			developers {
				publishs.developers.each { item ->
					if (item != null) developer {
						id = item.id
						name = item.name
						email = item.email
					}
				}
			}
//			pom.withXml {
//				asNode().appendNode('description',publishs.des)
//			}
		}
	}
	//logger.info("Published artifacts in ${configurations.archives}:")
	//configurations.archives.artifacts.files.files.each { logger.info("\t$it") }
}

afterEvaluate { project ->
	if (isAndroidProject) {
		def outFileType = isAndroidLibrary ? 'arr' : 'apk'

		if (isAndroidLibrary)
			project.android.libraryVariants.all { variant ->
				variant.outputs.each { output ->
					output.outputFileName = output.outputFileName.replace(".$outFileType", "-${publishs.version}.$outFileType")
				}
			}
		else
			project.android.applicationVariants.all { variant ->
				variant.outputs.each { output ->
					output.outputFileName = output.outputFileName.replace(".$outFileType", "-${publishs.version}.$outFileType")
				}
			}

		def releaseVariants = project.android.libraryVariants.findAll {
			it.buildType.name.equalsIgnoreCase('release')
		}

		def getAndroidSdkDirectory = project.android.sdkDirectory

		def getAndroidJar = "${getAndroidSdkDirectory}/platforms/${project.android.compileSdkVersion}/android.jar"

		task androidJavadocs(type: Javadoc, dependsOn: assembleRelease) {
			source = releaseVariants.collect { it.javaCompile.source }
			classpath = files(
				getAndroidJar,
				project.file("build/intermediates/classes/release")
			)
			doFirst {
				classpath += files(releaseVariants.collect { it.javaCompile.classpath.files })
			}
			options {
				links("http://docs.oracle.com/javase/7/docs/api/")
				linksOffline("http://d.android.com/reference",
					"${getAndroidSdkDirectory}/docs/reference")
			}

			exclude '**/BuildConfig.java'
			exclude '**/R.java'
		}

		def cleanJavadocTask = task("cleanJavadocTask", type: Delete) {
			delete androidJavadocs.destinationDir
		} as Task
		project.clean.dependsOn(cleanJavadocTask)

		task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
			classifier = 'javadoc'
			from androidJavadocs.destinationDir
			baseName "${publishs.jar.prefix}${project.name}${publishs.jar.postfix}"
		}

		task androidSourcesJar(type: Jar) {
			classifier = 'sources'
			from project.android.sourceSets.main.java.source
			baseName "${publishs.jar.prefix}${project.name}${publishs.jar.postfix}"
		}

		task androidLibraryJar(type: Jar, dependsOn: compileReleaseJavaWithJavac /* == variant.javaCompile */) {
			from compileReleaseJavaWithJavac.destinationDir
			exclude '**/R.class'
			exclude '**/BuildConfig.class'
			exclude '**/R$*.class'
			baseName "${publishs.jar.prefix}${project.name}${publishs.jar.postfix}"
		}

		artifacts {
			archives androidLibraryJar
			archives androidSourcesJar
			archives androidJavadocsJar
		}
	} else {
		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}

//	task javadoc(type: Javadoc) {
//		source = android.sourceSets.main.java.srcDirs
//		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//	}

		task javadocsJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from javadoc.destinationDir
		}

		artifacts {
			archives sourcesJar
			archives javadocsJar
		}
	}
}
